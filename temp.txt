            if self.floatingModel:
                self.indputData = np.expand_dism(frameResized, axis=0)
                
            print(self.inputData)
            
            self.interpreter.set_tensor(self.inputDetails[0]["index"], self.inputData)
            self.interpreter.invoke()
            self.boxes  = self.interpreter.get_tensor(self.outputDetails[0], ["index"])[0]
            self.classes = self.interpreter.get_tensor(self.outputDetails[1], ["index"])[0]
            self.scores = self.interpreter.get_tensor(self.outputDetails[2], ["index"])[0]
            
            for i in range(len(self.scores)):
                if ((self.scores[i] > CONSTANTS.INT_MIN_CONF_TRESHOLD)
                    and (self.scores[i] <= 1.0)):

                    ymin = int(max(1,(self.boxes[i][0] * self.imgHeight)))
                    xmin = int(max(1,(self.boxes[i][1] * self.imgWeight)))
                    ymax = int(min(self.imgHeight,(self.boxes[i][2] * self.imgHeight)))
                    xmax = int(min(self.imgWeight,(self.boxes[i][3] * self.imgWeight)))
                    
                    cv2.rectangle(frame, (xmin,ymin), (xmax,ymax), (10, 255, 0), 2)

                    # Draw label
                    objectName = self.labels[int(self.classes[i])] 
                    label = '%s: %d%%' % (objectName, int(self.scores[i]*100)) 
                    labelSize, baseLine = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2) 
                    labelYmin = max(ymin, labelSize[1] + 10) 
                    cv2.rectangle(frame, (xmin, labelYmin-labelSize[1]-10), (xmin+labelSize[0], labelYmin+baseLine-10), (255, 255, 255), cv2.FILLED) # Draw white box to put label text in
                    cv2.putText(frame, label, (xmin, labelYmin-7), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2) 
            cv2.imshow("Object detection", frame)
            
            if cv2.waitKey(1) == ord('q'):
                break